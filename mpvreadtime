#!/usr/bin/perl

# I want to type in times in a terminal window (or paste) and have mpv seek to that time immediately. 

# mpvs socket dox https://github.com/mpv-player/mpv/blob/master/DOCS/man/ipc.rst
#  ^^ is a bit longer than my man file in buster
#https://perldoc.perl.org/perlartistic

#       mpv can be controlled by external programs using the JSON-based IPC protocol.  It can be enabled by specifying the path to a unix socket or a  named  pipe  using the option --input-ipc-server. Clients can connect to this socket and send commands to the player or receive events from it.

# TODO ooops system changes pid, TODO make quitting mpv kill this script
use strict;

my $fifo='/tmp/mpvreadtime';
`mkfifo $fifo`;
our $pid;

use 5.10.0; # for say


my $oldpid=$$;
if ($pid=fork) {
	END { unlink $fifo;system 'kill', $pid if $pid; }
} else {
	if( my $pid=fork){  # now have child pid
		waitpid $pid,0; # wait child to exit;
		kill $oldpid; # kill the readline process
		exit;
	} else {
		exec 'mpv','--force-window=yes',"--input-ipc-server=$fifo",'--no-terminal', @ARGV; 
	}
}

say 'enter times to seek to';
say 'enter q to quit';

while (<STDIN>){
	chomp;
	exit 0 if $_ eq 'q';
	my $strong=$_;
	if(/:;/) {
		$strong=\to_seconds($_);
	}
# should now be in seconds
	$_ = <<"MSG";
echo '{ "command": ["set_property", "playback-time", "$strong" ] }' | socat - $fifo >/dev/null
MSG
	system 'bash','-ic',$_;
}



sub to_seconds{
	my $has_ms = scalar $_[0] =~ /\.\d+/;

        my @components = split /[;:\.]/, $_[0];
	push @components, 0 if not $has_ms ;

	@components = reverse @components;

	push @components, 0 if $#components < 3 ; # hours are opt.
	push @components, 0 if $#components < 3 ; # minutes are opt.

# now we should have an array of ms, s, min, h.

     	return (($components[3] * 60 + $components[2]) * 60 + $components[1])        + ".$components[0]";
}



